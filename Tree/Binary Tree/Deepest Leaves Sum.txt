/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        int depth = maxDepth(root);
        
        return sumOfDleaves(root, depth);
    }
    int sum = 0;
    public int sumOfDleaves(TreeNode root, int depth) {
        if (root == null) {
            return 0;
        }
        
        if (depth == 1) {
            return sum + root.val;
        }

        return sumOfDleaves(root.left, depth-1) + sumOfDleaves(root.right, depth-1);
    }
    
    public int maxDepth(TreeNode root) {
        return (root == null) ? 0 : Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}