/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null && root2 == null) {
            return null;
        }
        if (root1 == null && root2 != null) {
            return root2;
        }
        if (root2 == null && root1 != null) {
            return root1;
        }
        
        return new TreeNode(root1.val + root2.val, mergeTrees(root1.left, root2.left), mergeTrees(root1.right, root2.right));
    }
}

//2nd code
class Solution {
    private TreeNode merged=new TreeNode();
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        merged=mergeValue(root1,root2,merged);
        
        
       return merged; 
    }
    
    public TreeNode mergeValue(TreeNode r1,TreeNode r2, TreeNode m){
       if(r1 ==null && r2==null){
            return null;
        }
        m.left=new TreeNode();
        m.right=new TreeNode();
        if(r1==null){
            m.val=r2.val;
            m.left=mergeValue(null,r2.left,m.left);
        m.right=mergeValue(null,r2.right,m.right);
        }
        else if(r2==null){
            m.val=r1.val;
            m.left=mergeValue(r1.left,null,m.left);
        m.right=mergeValue(r1.right,null,m.right);
        }
        else{
        m.val=r1.val+r2.val;
        m.left=mergeValue(r1.left,r2.left,m.left);
        m.right=mergeValue(r1.right,r2.right,m.right);}
     return m;   
    }
}